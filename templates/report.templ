package templates

import (
    "strconv"
    "strings"
    "time"
    "github.com/thelooter/JavaDocParser/parser"
)

func isUpperCase(s string) bool {
    return s == strings.ToUpper(s)
}

func formatJavadocURL(baseURL, version, fullPath string, isMethod bool) string {
    // Split into parts
    parts := strings.Split(fullPath, ".")
    if len(parts) == 0 {
        return ""
    }

    // Find package/class boundary by first uppercase letter
    var packageParts []string
    var classParts []string
    inClass := false

    for _, part := range parts {
        if !inClass && (len(part) == 0 || (part[0] >= 'a' && part[0] <= 'z')) {
            packageParts = append(packageParts, part)
        } else {
            inClass = true
            classParts = append(classParts, part)
        }
    }

    // Handle methods
    if isMethod {
        methodName := classParts[len(classParts)-1]
        // Remove method from class parts
        classParts = classParts[:len(classParts)-1]
        // Build URL
        packagePath := strings.Join(packageParts, "/")
        classPath := strings.Join(classParts, ".")
        
        // Only add () if the method name doesn't already end with a closing parenthesis
        if !strings.HasSuffix(methodName, ")") {
            methodName = methodName + "()"
        }
        return baseURL + "/" + version + "/" + packagePath + "/" + classPath + ".html#" + methodName
    }

    // Handle enum constants
    if len(classParts) > 0 && isUpperCase(classParts[len(classParts)-1]) {
        constant := classParts[len(classParts)-1]
        // Remove constant from class parts
        classParts = classParts[:len(classParts)-1]
        // Build URL
        packagePath := strings.Join(packageParts, "/")
        classPath := strings.Join(classParts, ".")
        return baseURL + "/" + version + "/" + packagePath + "/" + classPath + ".html#" + constant
    }

    // Regular class or inner class
    packagePath := strings.Join(packageParts, "/")
    classPath := strings.Join(classParts, ".")
    return baseURL + "/" + version + "/" + packagePath + "/" + classPath + ".html"
}

type DeprecatedItem struct {
    FullPath string
    Name     string
}

type ClassGroup struct {
    ClassName string
    Items     []DeprecatedItem
}

type VersionGroup struct {
    Version string
    Classes []ClassGroup
}

type Report struct {
    Groups      []VersionGroup
    LastUpdated int64
}

func getTotalItems(groups []VersionGroup) int {
	total := 0
	for _, g := range groups {
		for _, c := range g.Classes {
			total += len(c.Items)
		}
	}
	return total
}

func getLatestVersion(groups []VersionGroup) string {
	if len(groups) > 0 {
		return groups[0].Version
	}
	return "N/A"
}

func hasMethodSignature(s string) bool {
    return strings.HasSuffix(s, "()") || (strings.Contains(s, "(") && strings.HasSuffix(s, ")"))
}


templ ReportPage(data Report,c *parser.JavadocConfig) {
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8"/>
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
        <title>Deprecation Report</title>
        <style>
            :root {
                --primary: #7661d9;           /* Darker soft lavender */
                --primary-dark: #5d49c6;      /* Even darker lavender */
                --surface: #ffffff;
                --text: #1f1f1f;
                --text-secondary: #595959;
                --border: #e0e0e0;
            }

            [data-theme="dark"] {
                --primary: #9683ec;          /* Darker lavender for dark mode */
                --primary-dark: #7661d9;     /* Darker lavender for dark mode */
                --surface: #161b22;
                --text: #c9d1d9;
                --text-secondary: #8b949e;
                --border: #30363d;
                --bg-color: #0d1117;
                --text-color: #c9d1d9;
                --link-color: #9683ec;       /* Match primary */
                --details-bg: #161b22;
            }

            body {
                font-family: system-ui, -apple-system, sans-serif;
                margin: 2rem auto;
                max-width: 1200px;
                padding: 0 1rem;
                color: var(--text);
                line-height: 1.5;
                background: #f5f5f5;
            }

            .version-group {
                margin: 1rem 0;
            }

            details {
                list-style: none;
                background: var(--surface);
                border: 1px solid var(--border);
                border-radius: 8px;
                padding: 1rem;
                box-shadow: 0 2px 4px rgba(0,0,0,0.05);
                transition: all 0.3s ease;
            }

            @keyframes sweep-in {
                0% {
                    opacity: 0;
                    list-style: none;
                    transform: translateX(-10px);
                }
                100% {
                    opacity: 1;
                    list-style: none;
                    transform: translateX(0);
                }
            }

            @keyframes sweep-out {
                0% {
                    opacity: 1;
                    list-style: none;
                    transform: translateX(0);
                }
                100% {
                    opacity: 0;
                    list-style: none;
                    transform: translateX(-10px);
                }
            }

            details[open] summary ~ * {
                list-style: none;
                animation: sweep-in 0.3s ease-in-out forwards;
            }

            details:not([open]) summary ~ * {
                list-style: none;
                animation: sweep-out 0.3s ease-in-out forwards;
            }

            details > summary {
                list-style: none;
                transition: margin 0.3s ease;
            }

            details > summary::-webkit-details-marker,
            details > summary::marker {
                display: none;
            }

            .version-header::before {
                display: none;
            }

            summary {
                color: var(--primary-dark);
                font-weight: 600;
                cursor: pointer;
                padding: 1rem;
                border-radius: 4px;
                outline: none;
            }

            summary:focus {
                box-shadow: 0 0 0 2px var(--primary);
            }

            .class-group {
                margin: 1rem 0;
                padding: 1.5rem;
                background: #fafafa;
                border: 1px solid var(--border);
                border-radius: 6px;
            }

            .class-name {
                font-weight: 600;
                color: var(--text);
                margin-bottom: 1rem;
                padding-bottom: 0.5rem;
                border-bottom: 2px solid var(--border);
            }

            .deprecation-list {
                margin: 1rem 0;
                padding: 0;
                list-style: none;
            }

            .deprecation-item {
                padding: 1rem;
                margin: 0.5rem 0;
                background: var(--surface);
                border: 1px solid var(--border);
                border-radius: 4px;
                box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            }

            .stats-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 1.5rem;
                margin: 2rem 0;
            }

            .stat-card {
                background: var(--surface);
                padding: 2rem;
                border-radius: 8px;
                text-align: center;
                border: 1px solid var(--border);
                box-shadow: 0 2px 4px rgba(0,0,0,0.05);
                transform: scale(1);
                transition: transform 0.2s ease, box-shadow 0.2s ease;
            }

            .stat-card:hover {
                transform: scale(1.02);
                box-shadow: 0 4px 8px var(--card-shadow);
            }

            .stat-number {
                font-size: 2.5rem;
                font-weight: 700;
                color: var(--primary-dark) !important;  /* Ensure color stays constant */
                margin-bottom: 0.75rem;
            }

            .stat-label {
                color: var(--text-secondary);
                font-size: 1rem;
                font-weight: 500;
            }

            .version-count {
                background: var(--primary-dark);
                color: white;
                padding: 0.5rem 1rem;
                border-radius: 999px;
                font-size: 0.875rem;
                font-weight: 500;
            }

            .version-header {
                display: flex;
                align-items: center;
                gap: 0.75rem;
            }

            .version-header::before {
                content: '\f054'; /* FontAwesome chevron-right */
                font-family: 'Font Awesome 6 Free';
                font-weight: 900;
                font-size: 0.875rem;
                color: var(--text-secondary);
                display: inline-block;
                transition: transform 0.3s ease;
            }

            details[open] .version-header::before {
                transform: rotate(90deg);
            }

            .version-title {
                font-size: 1.25rem;
                color: var (--primary-dark);
            }

            .version-stats {
                display: flex;
                gap: 0.75rem;
                margin-left: auto; /* Push to right */
                align-items: center;
            }

            .deprecation-count {
                background: var(--primary);
                color: white;
                padding: 0.25rem 0.75rem;
                border-radius: 999px;
                font-size: 0.875rem;
                font-weight: 500;
            }

            .class-count {
                color: var (--text-secondary);
                font-size: 0.875rem;
                padding: 0.25rem 0.75rem;
                background: var (--surface);
                border: 1px solid var (--border);
                border-radius: 999px;
            }

            .description {
                background: var(--surface);
                border: 1px solid var(--border);
                border-radius: 8px;
                padding: 1.5rem;
                margin: 2rem 0;
                line-height: 1.6;
            }

            .description h2 {
                color: var(--primary-dark);
                margin-top: 0;
                margin-bottom: 1rem;
                font-size: 1.5rem;
            }

            .description p {
                color: var(--text-secondary);
                margin: 0;
            }

            .description-limitations {
                margin-top: 1rem;
                padding-top: 1rem;
                border-top: 1px solid var(--border);
            }

            .description-limitations h3 {
                color: var(--text);
                font-size: 1.1rem;
                margin: 0 0 0.75rem 0;
            }

            .description-limitations ul {
                margin: 0;
                padding-left: 1.5rem;
                color: var(--text-secondary);
            }

            .description-limitations li {
                margin: 0.5rem 0;
            }

            .deprecation-item a {
                color: var(--primary);
                text-decoration: none;
            }

            .deprecation-item a:hover {
                text-decoration: underline;
            }

            .class-name a {
                color: var (--text);
                text-decoration: none;
            }

            .class-name a:hover {
                color: var(--primary);
            }

            .last-updated {
                color: var(--text-secondary);
                font-size: 0.875rem;
                text-align: right;
                margin: 1rem 0;
                font-style: italic;
            }

            :root {
                --bg-color: #ffffff;
                --text-color: #000000;
                --details-bg: #f6f8fa;
            }

            [data-theme="dark"] {
                --bg-color: #0d1117;
                --text-color: #c9d1d9;
                --details-bg: #161b22;
            }

            body {
                background-color: var(--bg-color);
                color: var(--text-color);
            }

            a {
                color: var(--link-color);
            }

            .class-group {
                background-color: var(--details-bg);
            }

            #theme-toggle {
                position: fixed;
                top: 1rem;
                right: 1rem;
                width: 40px;
                height: 40px;
                border-radius: 50%;
                border: 1px solid var(--text-color);
                background: var(--bg-color);
                color: var(--text-color);
                cursor: pointer;
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 0;
                transition: background 0.3s, color 0.3s;
            }

            #theme-toggle:hover {
                background: var(--primary);
                color: white;
                border-color: var(--primary);
            }

            #theme-toggle i {
                font-size: 1.2rem;
            }

            footer {
                margin-top: 4rem;
                padding: 2rem 0;
                text-align: center;
                border-top: 1px solid var(--border);
                color: var(--text-secondary);
            }

            footer a {
                color: var(--primary);
                text-decoration: none;
            }

            footer a:hover {
                text-decoration: underline;
                color: var(--primary-dark);
            }

            #back-to-top {
                position: fixed;
                bottom: 2rem;
                right: 2rem;
                background: var(--primary);
                color: white;
                width: 50px;
                height: 50px;
                border-radius: 50%;
                border: none;
                cursor: pointer;
                opacity: 0;
                transition: opacity 0.3s, background 0.3s;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 1.5rem;
                box-shadow: 0 2px 6px rgba(0,0,0,0.2);
            }

            #back-to-top:hover {
                background: var(--primary-dark);
            }

            #back-to-top.visible {
                opacity: 1;
            }

            .version-group details {
                transform: scale(1);
                transition: transform 0.2s ease;
            }

            .version-group details:hover {
                transform: scale(1.005);
            }

            #theme-toggle i {
                font-size: 1.2rem;
            }
    
            #back-to-top i {
                font-size: 1.3rem;
            }

            .deprecation-count {
                background: var(--primary-dark);
                color: white;
                padding: 0.5rem 1rem;
                border-radius: 999px;
                font-size: 0.875rem;
                font-weight: 500;
            }
        </style>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    </head>
    <body>
        <button id="theme-toggle">
            <i class="fas fa-moon"></i>
        </button>
        <h1 aria-label="PaperMC Deprecation report">PaperMC Deprecation Report</h1>
        <div class="last-updated">
            Last updated: { time.Unix(data.LastUpdated, 0).Format("January 2, 2006 15:04 MST") }
        </div>
        <div class="description">
            <h2>About This Report</h2>
            <p>
                This report provides a comprehensive overview of deprecated elements in the PaperMC API, organized by Minecraft version.
                Each version section shows deprecated classes, methods, and fields that were marked for removal in that version.
                This helps developers track API changes and update their plugins accordingly.
            </p>
            <div class="description-limitations">
                <h3>Limitations</h3>
                <ul>
                    <li>Methods that have already been removed in previous versions are not tracked</li>
                    <li>Some deprecated elements may not show version information if it's not specified in the API documentation</li>
                </ul>
            </div>
        </div>
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number">{ strconv.Itoa(len(data.Groups)) }</div>
                <div class="stat-label">Indexed Versions</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{ strconv.Itoa(getTotalItems(data.Groups)) }</div>
                <div class="stat-label">Total Deprecations</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{ getLatestVersion(data.Groups) }</div>
                <div class="stat-label">Latest Version</div>
            </div>
        </div>
        for _, group := range data.Groups {
            <div class="version-group">
                <details>
                    <summary style="list-style: none;">
                        <div class="version-header">
                            <span class="version-title">Version { group.Version }</span>
                            <div class="version-stats">
                                <span class="class-count">{ strconv.Itoa(len(group.Classes)) } classes</span>
                                <span class="deprecation-count">{ strconv.Itoa(getTotalItems([]VersionGroup{group})) } deprecations</span>
                            </div>
                        </div>
                    </summary>
                    for _, classGroup := range group.Classes {
                        <div class="class-group">
                            <div class="class-name">
                                <a href={ templ.URL(formatJavadocURL(c.BaseURL, c.Version, classGroup.ClassName, false)) }>
                                    { classGroup.ClassName }
                                </a>
                            </div>
                            <ul class="deprecation-list" style="list-style-type: none;">
                                for _, item := range classGroup.Items {
                                    <li class="deprecation-item">
                                        <a href={ templ.URL(formatJavadocURL(c.BaseURL, c.Version, item.FullPath, hasMethodSignature(item.FullPath))) }>
                                            { item.Name }
                                        </a>
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                </details>
            </div>
        }
        <button id="back-to-top" title="Back to top">
            <i class="fas fa-arrow-up"></i>
        </button>
        <script>
            const themeToggle = document.getElementById('theme-toggle');
            const themeIcon = themeToggle.querySelector('i');
    
            function updateThemeIcon(isDark) {
                themeIcon.className = isDark ? 'fas fa-sun' : 'fas fa-moon';
            }
    
            const prefersDark = window.matchMedia('(prefers-color-scheme: dark)');

            function setTheme(isDark) {
                document.documentElement.setAttribute('data-theme', isDark ? 'dark' : 'light');
                localStorage.setItem('theme', isDark ? 'dark' : 'light');
                updateThemeIcon(isDark);
            }

            // Set initial theme
            const savedTheme = localStorage.getItem('theme');
            if (savedTheme) {
                setTheme(savedTheme === 'dark');
            } else {
                setTheme(prefersDark.matches);
            }

            // Handle toggle button click
            themeToggle.addEventListener('click', () => {
                const isDark = document.documentElement.getAttribute('data-theme') === 'dark';
                setTheme(!isDark);
            });

            // Handle system theme changes
            prefersDark.addEventListener('change', (e) => {
                setTheme(e.matches);
            });

            const backToTop = document.getElementById('back-to-top');

            window.addEventListener('scroll', () => {
                if (window.scrollY > 300) {
                    backToTop.classList.add('visible');
                } else {
                    backToTop.classList.remove('visible');
                }
            });

            backToTop.addEventListener('click', () => {
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth'
                });
            });

            function animateNumber(element, target, duration = 500) {
                const start = 0;
                const startTime = performance.now();
                
                const easeOut = (t) => 1 - Math.pow(1 - t, 2); // Quadratic easing out
                
                const animate = (currentTime) => {
                    const elapsed = currentTime - startTime;
                    const progress = Math.min(elapsed / duration, 1);
                    
                    const current = target * easeOut(progress);
                    
                    element.textContent = Math.round(current);
                    
                    if (progress < 1) {
                        requestAnimationFrame(animate);
                    } else {
                        element.textContent = Math.round(target);
                    }
                };
                
                requestAnimationFrame(animate);
            }

            // Initialize animations when page loads
            document.addEventListener('DOMContentLoaded', () => {
                const statNumbers = document.querySelectorAll('.stat-number');
                // Only animate first two stat numbers
                statNumbers.forEach((stat, index) => {
                    if (index < 2) { // Only first two stats
                        const target = parseInt(stat.textContent);
                        stat.textContent = '0';
                        animateNumber(stat, target);
                    }
                });
            });
        </script>
        <footer>
            Built with ❤️ by <a href="https://github.com/thelooter" target="_blank" rel="noopener noreferrer">thelooter</a>
        </footer>
    </body>
    </html>
}
